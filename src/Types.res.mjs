// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var _map = {"cache-first":"cache-first","cache-only":"cache-only","network-only":"network-only","cache-and-network":"cache-and-network"};

function requestPolicyToJs(param) {
  return param;
}

function requestPolicyFromJs(param) {
  return _map[param];
}

function operationResultToReScript(response, parse) {
  var error = response.error;
  var data = Belt_Option.map(Caml_option.nullable_to_opt(response.data), parse);
  var response$1 = data !== undefined ? ({
        TAG: "Data",
        _0: Caml_option.valFromOption(data)
      }) : (
      error !== undefined ? ({
            TAG: "Error",
            _0: error
          }) : "Empty"
    );
  return {
          data: data,
          error: error,
          extensions: response.extensions,
          response: response$1,
          stale: response.stale
        };
}

function hookResponseToReScript(response, parse) {
  var error = response.error;
  var fetching = response.fetching;
  var data = Belt_Option.map(Caml_option.nullable_to_opt(response.data), parse);
  var response$1;
  var exit = 0;
  if (fetching) {
    if (data !== undefined) {
      exit = 1;
    } else {
      response$1 = "Fetching";
    }
  } else if (data !== undefined) {
    exit = 1;
  } else {
    response$1 = error !== undefined ? ({
          TAG: "Error",
          _0: error
        }) : "Empty";
  }
  if (exit === 1) {
    var d = Caml_option.valFromOption(data);
    response$1 = error !== undefined ? ({
          TAG: "PartialData",
          _0: d,
          _1: error.graphQLErrors
        }) : ({
          TAG: "Data",
          _0: d
        });
  }
  return {
          operation: response.operation,
          fetching: fetching,
          data: data,
          error: error,
          response: response$1,
          extensions: response.extensions,
          stale: response.stale
        };
}

var Hooks = {
  hookResponseToReScript: hookResponseToReScript
};

export {
  requestPolicyToJs ,
  requestPolicyFromJs ,
  operationResultToReScript ,
  Hooks ,
}
/* No side effect */
