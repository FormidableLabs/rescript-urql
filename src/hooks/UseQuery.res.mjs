// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Urql from "urql";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Types$ReScriptUrql from "../Types.res.mjs";

function useQuery(Query, pause, additionalTypenames, fetchOptions, $$fetch, requestPolicy, url, meta, suspense, preferGetMethod, variables) {
  var query = Query.query;
  var parse = Query.parse;
  var rp = React.useMemo((function (param) {
          return Belt_Option.map(requestPolicy, Types$ReScriptUrql.requestPolicyToJs);
        }), [requestPolicy]);
  var context = React.useMemo((function (param) {
          var tmp = {};
          if (additionalTypenames !== undefined) {
            tmp.additionalTypenames = Caml_option.valFromOption(additionalTypenames);
          }
          if ($$fetch !== undefined) {
            tmp.fetch = Caml_option.valFromOption($$fetch);
          }
          if (fetchOptions !== undefined) {
            tmp.fetchOptions = Caml_option.valFromOption(fetchOptions);
          }
          if (rp !== undefined) {
            tmp.requestPolicy = Caml_option.valFromOption(rp);
          }
          if (url !== undefined) {
            tmp.url = Caml_option.valFromOption(url);
          }
          if (meta !== undefined) {
            tmp.meta = Caml_option.valFromOption(meta);
          }
          if (suspense !== undefined) {
            tmp.suspense = Caml_option.valFromOption(suspense);
          }
          if (preferGetMethod !== undefined) {
            tmp.preferGetMethod = Caml_option.valFromOption(preferGetMethod);
          }
          return tmp;
        }), [
        additionalTypenames,
        fetchOptions,
        $$fetch,
        url,
        rp,
        meta,
        suspense,
        preferGetMethod
      ]);
  var args = React.useMemo((function (param) {
          return {
                  query: query,
                  variables: Curry._1(Query.variablesToJson, Curry._1(Query.serializeVariables, variables)),
                  requestPolicy: rp,
                  context: context,
                  pause: pause
                };
        }), [
        query,
        variables,
        rp,
        pause,
        context
      ]);
  var match = Urql.useQuery(args);
  var executeQueryJs = match[1];
  var stateJs = match[0];
  var state = React.useMemo((function (param) {
          return Types$ReScriptUrql.Hooks.hookResponseToReScript(stateJs, parse);
        }), [
        stateJs,
        parse
      ]);
  var executeQuery = React.useMemo((function (param) {
          return function (additionalTypenames, fetchOptions, $$fetch, requestPolicy, url, meta, suspense, preferGetMethod, param) {
            var tmp = {};
            if (additionalTypenames !== undefined) {
              tmp.additionalTypenames = Caml_option.valFromOption(additionalTypenames);
            }
            if ($$fetch !== undefined) {
              tmp.fetch = Caml_option.valFromOption($$fetch);
            }
            if (fetchOptions !== undefined) {
              tmp.fetchOptions = Caml_option.valFromOption(fetchOptions);
            }
            var tmp$1 = Belt_Option.map(requestPolicy, Types$ReScriptUrql.requestPolicyToJs);
            if (tmp$1 !== undefined) {
              tmp.requestPolicy = Caml_option.valFromOption(tmp$1);
            }
            if (url !== undefined) {
              tmp.url = Caml_option.valFromOption(url);
            }
            if (meta !== undefined) {
              tmp.meta = Caml_option.valFromOption(meta);
            }
            if (suspense !== undefined) {
              tmp.suspense = Caml_option.valFromOption(suspense);
            }
            if (preferGetMethod !== undefined) {
              tmp.preferGetMethod = Caml_option.valFromOption(preferGetMethod);
            }
            return Curry._1(executeQueryJs, tmp);
          };
        }), [executeQueryJs]);
  return [
          state,
          executeQuery
        ];
}

export {
  useQuery ,
}
/* urql Not a pure module */
