// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Urql from "urql";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Types$ReScriptUrql from "../Types.res.mjs";

function useMutation(Mutation) {
  var parse = Mutation.parse;
  var match = Urql.useMutation(Mutation.query);
  var executeMutationJs = match[1];
  var stateJs = match[0];
  var state = React.useMemo((function (param) {
          return Types$ReScriptUrql.Hooks.hookResponseToReScript(stateJs, parse);
        }), [
        stateJs,
        parse
      ]);
  var executeMutation = React.useMemo((function (param) {
          return function (additionalTypenames, fetchOptions, $$fetch, requestPolicy, url, meta, suspense, preferGetMethod, variables) {
            var tmp = {};
            if (additionalTypenames !== undefined) {
              tmp.additionalTypenames = Caml_option.valFromOption(additionalTypenames);
            }
            if ($$fetch !== undefined) {
              tmp.fetch = Caml_option.valFromOption($$fetch);
            }
            if (fetchOptions !== undefined) {
              tmp.fetchOptions = Caml_option.valFromOption(fetchOptions);
            }
            var tmp$1 = Belt_Option.map(requestPolicy, Types$ReScriptUrql.requestPolicyToJs);
            if (tmp$1 !== undefined) {
              tmp.requestPolicy = Caml_option.valFromOption(tmp$1);
            }
            if (url !== undefined) {
              tmp.url = Caml_option.valFromOption(url);
            }
            if (meta !== undefined) {
              tmp.meta = Caml_option.valFromOption(meta);
            }
            if (suspense !== undefined) {
              tmp.suspense = Caml_option.valFromOption(suspense);
            }
            if (preferGetMethod !== undefined) {
              tmp.preferGetMethod = Caml_option.valFromOption(preferGetMethod);
            }
            var ctx = tmp;
            var __x = Curry._2(executeMutationJs, Curry._1(Mutation.variablesToJson, Curry._1(Mutation.serializeVariables, variables)), ctx);
            return Js_promise.then_((function (response) {
                          return Promise.resolve(Types$ReScriptUrql.operationResultToReScript(response, parse));
                        }), __x);
          };
        }), [executeMutationJs]);
  return [
          state,
          executeMutation
        ];
}

export {
  useMutation ,
}
/* urql Not a pure module */
